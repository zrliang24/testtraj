formatC(sort(daily_hours),
width = 2,
flag = 0)
}
# Make nested loop with daily beginning hours
for (j in daily_hours) {
start_hour_GMT <- j
#--- Determine which met files are required for
#    this run
# Determine the start time of the model run
start_time_GMT <-
ymd_hms(paste0(ifelse(start_year_GMT > 40,
paste0("19",
start_year_GMT),
start_year_GMT), "-",
start_month_GMT, "-",
start_day_GMT, " ",
start_hour_GMT, ":00:00"))
# Determine the end time of the model run
end_time_GMT <-
as.POSIXct(
ifelse(direction == "backward",
start_time_GMT -
(duration * 3600),
start_time_GMT +
(duration * 3600)),
origin = "1970-01-01",
tz = "UTC")
# Determine whether the start year is a leap year
leap_year <-
leap_year(ymd(paste0(start_year_GMT, "-",
start_month_GMT, "-",
start_day_GMT)))
# Determine whether the beginning and end of the
# current run crosses over a calendar year
number_of_calendar_years <-
ifelse(year(start_time_GMT) ==
year(end_time_GMT), 1, 2)
# Determine whether the beginning and end of the
# current run crosses over a calendar month
number_of_calendar_months <-
ifelse(month(start_time_GMT) ==
month(end_time_GMT), 1, 2)
#--- Divide different requirements for met files
#    into different cases
# Set the different cases to FALSE by default
case_within_month <- FALSE
case_over_year <- FALSE
case_over_month <- FALSE
# Determine which of the three cases is true
if (number_of_calendar_years == 1 &
number_of_calendar_months == 1) {
case_within_month <- TRUE
} else if (number_of_calendar_years > 1) {
case_over_year <- TRUE
} else if (number_of_calendar_months > 1) {
case_over_month <- TRUE
} else { NULL }
#--- Get vector lists of met files applicable
# Trap leap-year condition of missing .w5 met
# file for February in a '0' list value
if (case_within_month &
met_type == "gdas1") met <-
c(paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w1"),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w2"),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w3"),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w4"),
ifelse(month(start_time_GMT) == 2 &
leap_year == TRUE, 0,
paste0(
"gdas1.",
substr(
tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(
year(start_time_GMT), 3, 4),
".w5")))
if (case_over_year &
met_type == "gdas1") met <-
c(paste0(
"gdas1.dec",
substr(year(end_time_GMT), 3, 4), ".w3"),
paste0(
"gdas1.dec",
substr(year(end_time_GMT), 3, 4), ".w4"),
paste0(
"gdas1.dec",
substr(year(end_time_GMT), 3, 4), ".w5"),
paste0(
"gdas1.jan",
substr(year(start_time_GMT), 3, 4), ".w1"),
paste0(
"gdas1.jan",
substr(year(start_time_GMT), 3, 4), ".w2"),
paste0(
"gdas1.jan",
substr(year(start_time_GMT), 3, 4), ".w3"))
if (case_over_month &
met_type == "gdas1") met <-
c(paste0(
"gdas1.",
substr(tolower(format(end_time_GMT,
"%B")), 1, 3),
substr(year(end_time_GMT), 3, 4), ".w3"),
paste0(
"gdas1.",
substr(tolower(format(end_time_GMT,
"%B")), 1, 3),
substr(year(end_time_GMT), 3, 4), ".w4"),
ifelse(
month(end_time_GMT) == 2 &
leap_year == TRUE, 0,
paste0("gdas1.",
substr(tolower(format(end_time_GMT,
"%B")), 1, 3),
substr(year(end_time_GMT), 3, 4),
".w5")),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w1"),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w2"),
paste0(
"gdas1.",
substr(tolower(format(start_time_GMT,
"%B")), 1, 3),
substr(year(start_time_GMT), 3, 4), ".w3"))
# Get vector lists of met files applicable to run
# from the NCEP/NCAR reanalysis dataset
if (met_type == "reanalysis") met <-
c(paste0(
"RP",
ifelse(start_month_GMT == "01",
year(start_time_GMT) - 1,
year(start_time_GMT)),
ifelse(start_month_GMT == "01", "12",
formatC(month(start_time_GMT) - 1,
width = 2,
format = "d",
flag = "0")),
".gbl"),
paste0(
"RP",
year(start_time_GMT),
start_month_GMT, ".gbl"),
paste0(
"RP",
ifelse(start_month_GMT == "12",
year(start_time_GMT) + 1,
year(start_time_GMT)),
ifelse(start_month_GMT == "12", "01",
formatC(month(start_time_GMT) + 1,
width = 2,
format = "d",
flag = "0")),
".gbl"))
# Get vector lists of met files applicable to run
# from the NARR dataset
if (met_type == "narr") met <-
c(paste0(
"NARR",
ifelse(start_month_GMT == "01",
year(start_time_GMT) - 1,
year(start_time_GMT)),
ifelse(start_month_GMT == "01", "12",
formatC(month(start_time_GMT) - 1,
width = 2,
format = "d",
flag = "0"))),
paste0(
"NARR",
year(start_time_GMT),
start_month_GMT),
paste0(
"NARR",
ifelse(start_month_GMT == "12",
year(start_time_GMT) + 1,
year(start_time_GMT)),
ifelse(start_month_GMT == "12", "01",
formatC(month(start_time_GMT) + 1,
width = 2,
format = "d",
flag = "0"))))
# Remove list values containing '0' (representing
# missing .w5 data files for Feb in leap years)
if (exists("met")) met <- met[!met %in% c(0)]
# Are the met files available on the selected path?
met_file_df <-
setNames(data.frame(
mat.or.vec(nr = length(met), nc = 2)),
nm = c("file","available"))
if (any(c("mac", "unix") %in% get_os())) {
for (k in 1:length(met)) {
met_file_df[k, 1] <- met[k]
met_file_df[k, 2] <-
as.character(
file.exists(paste0(met_dir,
"/", met[k])))
}
# Write the met file availability to file
write.table(
met_file_df,
file = paste0(met_dir,
"/met_file_list"),
sep = ",",
row.names = FALSE,
col.names = FALSE,
quote = FALSE,
append = FALSE)
# Download the missing met files
if (FALSE %in% met_file_df[,2]) {
files_to_get <-
subset(met_file_df,
available == FALSE)[,1]
if (met_type == "reanalysis") {
get_met_reanalysis(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
if (met_type == "narr") {
get_met_narr(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
if (met_type == "gdas1") {
get_met_gdas1(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
}
}
if (get_os() == "win") {
for (k in 1:length(met)) {
met_file_df[k, 1] <- met[k]
met_file_df[k, 2] <-
as.character(file.exists(paste0(met_dir, "/",
met[k])))}
# Write the met file availability to file
write.table(
met_file_df,
file = paste0(met_dir, "/met_file_list"),
sep = ",",
row.names = FALSE,
col.names = FALSE,
quote = FALSE,
append = FALSE)
# Download the missing met files
if (FALSE %in% met_file_df[,2]) {
files_to_get <- subset(met_file_df,
available == FALSE)[,1]
if (met_type == "reanalysis") {
get_met_reanalysis(files = files_to_get,
path_met_files = met_dir)
}
if (met_type == "narr") {
get_met_narr(files = files_to_get,
path_met_files = met_dir)
}
if (met_type == "gdas1") {
get_met_gdas1(files = files_to_get,
path_met_files = met_dir)
}
}
}
# Construct the output filename string for this
# model run
output_filename <-
paste0("traj-",
ifelse(is.null(traj_name),
"", traj_name),
"-",
ifelse(direction == "backward",
"bwd", "fwd"), "-",
start_year_GMT, "-",
start_month_GMT, "-",
start_day_GMT, "-",
start_hour_GMT, "-",
z,
"lat_", gsub("\\.", "p", as.character(lat)), "_",
"lon_", gsub("\\.", "p", as.character(lon)), "-",
"hgt_", height, "-",
duration, "h")
#formatC(z, width = 5, format = "d", flag = "0"))
all_trajectory_files <-
c(all_trajectory_files, output_filename)
if (any(c("mac", "unix") %in% get_os())) {
# Write start year, month, day, hour to
# 'CONTROL'
cat(start_year_GMT, " ",
start_month_GMT, " ",
start_day_GMT, " ",
start_hour_GMT, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = FALSE)
# Write number of starting locations to
# 'CONTROL'
cat("1\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write starting latitude, longitude, height
# AGL to 'CONTROL'
cat(coords$lat[z], " ",
coords$lon[z], " ",
height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write direction and number of simulation
# hours to 'CONTROL'
cat(ifelse(direction == "backward", "-", ""),
duration, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write vertical motion option to 'CONTROL'
cat(vert_motion, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write top of model domain in meters to
# 'CONTROL'
cat(model_height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write number of met files used to 'CONTROL'
cat(length(met), "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write met file paths to 'CONTROL'
for (i in 1:length(met)) {
cat(met_dir, "/\n", met[i], "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)}
# Write path for trajectory output files to
# 'CONTROL'
cat(exec_dir, "/\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write name of output filename to 'CONTROL'
cat(output_filename, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
}
if (get_os() == "win") {
# Write start year, month, day, hour to
# 'CONTROL'
cat(start_year_GMT, " ",
start_month_GMT, " ",
start_day_GMT, " ",
start_hour_GMT, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = FALSE)
# Write number of starting locations
# to 'CONTROL'
cat("1\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write starting latitude, longitude, height
# AGL to 'CONTROL'
cat(coords$lat[z], " ",
coords$lon[z], " ",
height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write direction and number of simulation
# hours to 'CONTROL'
cat(ifelse(direction == "backward", "-", ""),
duration, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write vertical motion option to 'CONTROL'
cat(vert_motion, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write top of model domain in meters to
# 'CONTROL'
cat(model_height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write number of met files used to 'CONTROL'
cat(length(met), "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write met file paths to 'CONTROL'
for (i in 1:length(met)) {
cat(met_dir, "/\n", met[i], "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)}
# Write path for trajectory output files to
# 'CONTROL'
cat(exec_dir, "/\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write name of output filename to 'CONTROL'
cat(output_filename, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
}
# The CONTROL file is now complete and in the
# working directory, so, execute the model run
if (any(c("mac", "unix") %in% get_os())) {
system(paste0("(cd ", exec_dir, " && ",
binary_path,
" >> /dev/null 2>&1)"))
}
if (get_os() == "win") {
shell(paste0("(cd \"", exec_dir, "\" && \"",
binary_path,
"\")"))
# shell(paste0("(cd \"", exec_dir, "\")"))
}
}
}
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(exec_dir, "/",
folder_name))) {
dir.create(
path = paste0(exec_dir, "/",
folder_name))
}
system(paste0("(cd ", exec_dir, " && mv '",
all_trajectory_files[i], "' ",
paste0(out_dir, "/",
folder_name),
")"))
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(exec_dir, "/",
folder_name))) {
dir.create(
path = paste0(exec_dir, "/",
folder_name))
}
all_trajectory_files
dir.create(
path = paste0(out_dir, "/",
folder_name))
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(out_dir, "/",
folder_name))) {
dir.create(
path = paste0(out_dir, "/",
folder_name))
}
if (any(c("mac", "unix") %in% get_os())) {
# Perform the movement of all trajectory files
# into a folder residing to the output directory
for (i in 1:length(all_trajectory_files)) {
system(paste0("(cd ", exec_dir, " && mv '",
all_trajectory_files[i], "' ",
paste0(out_dir, "/",
folder_name),
")"))
}
}
traj_df <-
trajectory_read(output_folder =
paste0(exec_dir, "/",
folder_name))
traj_df <-
trajectory_read(output_folder =
paste0(out_dir, "/",
folder_name))
?git_credentials()
git_credentials()
git
remotes::git_credentials()
?gitcreds::gitcreds_set()
gitcreds_get(url = 'https://github.com/zrliang24/testtraj.git', use_cache = T, set_cache = T)
gitcreds_set(url = 'https://github.com/zrliang24/testtraj.git', use_cache = T, set_cache = T)
require(tidyverse)
devtools::load_all('.')
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
a <- Sys.time()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
rlang::last_trace()
git merge --abort
git commit -a
document()
?density
?conditional_frequency_fraction
check()
document()
?get_traj
