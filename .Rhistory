} else {
statDF <- abr %>%
mutate(Target = unname(quantile(PM, statFraction)),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
}
trajAbr <- subset(traj, trajTime %in% round(statDF$date, units = 'hours'))
# this is more straightforward and works too
if (nrow(trajAbr) > 100000) {
gritty <- rast(trajExt,
resolution = 0.001,
crs = '+proj=longlat +datum=WGS84')
} else {
gritty <- rast(trajExt,
resolution = 0.01,
crs = '+proj=longlat +datum=WGS84')
}
cff <- conditional_frequency_fraction(trajAbr,
coords,
gritty,
statDF,
remove.outliers = F)
outMap <- ggmap(vallejo) +
tidyterra::geom_spatraster(mapping = aes(),
data = cff,
alpha = 0.5) +
scale_fill_viridis_c(option = 'plasma') +
labs(title = paste(region),
subtitle = paste('statistic:', statistic, '|',
'buffer:', buffer, '|',
'n =', nrow(trajAbr)))
if (justmap) {
print(outMap)
}
return(outMap)
}
make_cool_map(region = 'Downtown', statistic = 'mean')
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
make_cool_map(region = 'Downtown', statistic = 'mean')
make_cool_map(region = 'Downtown', statistic = 'mean')
usethis::use_r('make_map')
make_cool_map(region = 'Downtown', statistic = 'mean', just_map = F)
make_cool_map(region = 'Downtown', statistic = 'mean', justmap = F)
make_cool_map(region = 'Downtown', statistic = 'mean', justmap = T)
return(outMap)
# Create a function that creates the cff map from a given region and statistic
# Regions: North, South, Downtown, Foothills, Mare Island
make_cool_map <- function(region, statistic, buffer = 10, justmap = F) {
stats <- c('ninetieth',
'fiftieth',
'tenth',
'mean')
statFraction <- case_when(
statistic == stats[1] ~ 0.9,
statistic == stats[2] ~ 0.5,
statistic == stats[3] ~ 0.1,
statistic == stats[4] ~ 0,
T ~ NA)
# First, subset the PM data frame
abr <- subset(siteDF, Region == region)
if (is.na(statFraction)) {
print(paste('Please choose from',
paste(stats, collapse = ', ')))
return(NULL)
} else if (statFraction == 0) {
statDF <- abr %>%
mutate(Target = mean(PM),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
} else {
statDF <- abr %>%
mutate(Target = unname(quantile(PM, statFraction)),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
}
trajAbr <- subset(traj, trajTime %in% round(statDF$date, units = 'hours'))
# this is more straightforward and works too
if (nrow(trajAbr) > 100000) {
gritty <- rast(trajExt,
resolution = 0.001,
crs = '+proj=longlat +datum=WGS84')
} else {
gritty <- rast(trajExt,
resolution = 0.01,
crs = '+proj=longlat +datum=WGS84')
}
cff <- conditional_frequency_fraction(trajAbr,
coords,
gritty,
statDF,
remove.outliers = F)
outMap <- ggmap(vallejo) +
tidyterra::geom_spatraster(mapping = aes(),
data = cff,
alpha = 0.5) +
scale_fill_viridis_c(option = 'plasma') +
labs(title = paste(region),
subtitle = paste('statistic:', statistic, '|',
'buffer:', buffer, '|',
'n =', nrow(trajAbr)))
# if (justmap) {
#   print(outMap)
# }
return(outMap)
}
make_map <- function(region, statistic, buffer = 10, justmap = F) {
stats <- c('ninetieth',
'fiftieth',
'tenth',
'mean')
statFraction <- case_when(
statistic == stats[1] ~ 0.9,
statistic == stats[2] ~ 0.5,
statistic == stats[3] ~ 0.1,
statistic == stats[4] ~ 0,
T ~ NA)
# First, subset the PM data frame
abr <- subset(siteDF, Region == region)
if (is.na(statFraction)) {
print(paste('Please choose from',
paste(stats, collapse = ', ')))
return(NULL)
} else if (statFraction == 0) {
statDF <- abr %>%
mutate(Target = mean(PM),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
} else {
statDF <- abr %>%
mutate(Target = unname(quantile(PM, statFraction)),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
}
trajAbr <- subset(traj, trajTime %in% round(statDF$date, units = 'hours'))
# this is more straightforward and works too
if (nrow(trajAbr) > 100000) {
gritty <- rast(trajExt,
resolution = 0.001,
crs = '+proj=longlat +datum=WGS84')
} else {
gritty <- rast(trajExt,
resolution = 0.01,
crs = '+proj=longlat +datum=WGS84')
}
cff <- conditional_frequency_fraction(trajAbr,
coords,
gritty,
statDF,
remove.outliers = F)
outMap <- ggmap(vallejo) +
tidyterra::geom_spatraster(mapping = aes(),
data = cff,
alpha = 0.5) +
scale_fill_viridis_c(option = 'plasma') +
labs(title = paste(region),
subtitle = paste('statistic:', statistic, '|',
'buffer:', buffer, '|',
'n =', nrow(trajAbr)))
if (justmap) {
print(outMap)
}
return(outMap)
}
#'   Foothills, Mare Island
#' @param statistic Options are: Ninetieth, Fiftieth, Tenth, Mean
#' @param buffer Fraction out of 100 to exclude.
#' @param justmap
#'
#' @return
#' @export
#'
#' @examples
#'
make_map <- function(region, statistic, buffer = 10, justmap = F) {
stats <- c('ninetieth',
'fiftieth',
'tenth',
'mean')
statFraction <- case_when(
statistic == stats[1] ~ 0.9,
statistic == stats[2] ~ 0.5,
statistic == stats[3] ~ 0.1,
statistic == stats[4] ~ 0,
T ~ NA)
# First, subset the PM data frame
abr <- subset(siteDF, Region == region)
if (is.na(statFraction)) {
print(paste('Please choose from',
paste(stats, collapse = ', ')))
return(NULL)
} else if (statFraction == 0) {
statDF <- abr %>%
mutate(Target = mean(PM),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
} else {
statDF <- abr %>%
mutate(Target = unname(quantile(PM, statFraction)),
Upper = Target * (1 + buffer/100),
Lower = Target * (1 - buffer/100)) %>%
filter(between(PM, Lower, Upper)) %>%
ungroup()
}
trajAbr <- subset(traj, trajTime %in% round(statDF$date, units = 'hours'))
# this is more straightforward and works too
if (nrow(trajAbr) > 100000) {
gritty <- rast(trajExt,
resolution = 0.001,
crs = '+proj=longlat +datum=WGS84')
} else {
gritty <- rast(trajExt,
resolution = 0.01,
crs = '+proj=longlat +datum=WGS84')
}
cff <- conditional_frequency_fraction(trajAbr,
coords,
gritty,
statDF,
remove.outliers = F)
outMap <- ggmap(vallejo) +
tidyterra::geom_spatraster(mapping = aes(),
data = cff,
alpha = 0.5) +
scale_fill_viridis_c(option = 'plasma') +
labs(title = paste(region),
subtitle = paste('statistic:', statistic, '|',
'buffer:', buffer, '|',
'n =', nrow(trajAbr)))
# if (justmap) {
#   print(outMap)
# }
return(outMap)
}
check()
require(devtools)
check()
document()
gitcreds::gitcreds_set()
usethis::use_vignette('makemaps_vignette')
library(ggmap)
library(testtraj)
library(terra)
library(ggmap)
library(testtraj)
library(terra)
library(ggmap)
outputs <- readRDS('/home/donatello/Rprojects/data/freqDF')
siteDF <- readRDS('/home/donatello/Rprojects/data/pmData')
siteDF <- readRDS('/home/donatello/Rprojects/data/pmData')
document()
# Vallejo basemap
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
library(testtraj)
load_all()
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = T)
rm(outputs)
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
make_cool_map(region = 'Downtown', statistic = 'mean', justmap = T)
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = T)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = T)
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
# create coordiates matrix for rasterize function
coords <- cbind(traj$lon, traj$lat)
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = T)
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = T)
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10,
justmap = F)
check()
check()
load_all()
check()
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10)
check()
document()
check()
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10)
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(testtraj)
library(terra)
library(ggmap)
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
# create coordiates matrix for rasterize function
coords <- cbind(traj$lon, traj$lat)
# Vallejo basemap
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
# PM Data
siteDF <- readRDS('/home/donatello/Rprojects/data/pmData')
make_map(region = 'Downtown',
statistic = 'mean',
basemap = vallejo,
buffer = 10)
# library(testtraj)
# library(terra)
# read in trajectory data
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 &
lat <= 38.2 &
lon >= -122.38 &
lon <= -122.15)
library(testtraj)
library(terra)
# library(testtraj)
# library(terra)
# read in trajectory data
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 &
lat <= 38.2 &
lon >= -122.38 &
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
coords <- cbind(traj$lon, traj$lat)
# generate frequency plot
outputs <- rasterize(coords, trajgrid, fun = 'count')
plot(outputs)
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.05,
crs = '+proj=longlat +datum=WGS84')
coords <- cbind(traj$lon, traj$lat)
# generate frequency plot
outputs <- rasterize(coords, trajgrid, fun = 'count')
plot(outputs)
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
require(tidyverse)
require(devtools)
load_all('.')
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
# create coordiates matrix for rasterize function
coords <- cbind(traj$lon, traj$lat)
# generate frequency plot
outputs <- rasterize(coords, trajgrid, fun = 'count')
# read in saved dataframe
outputs <- readRDS('/home/donatello/Rprojects/data/freqDF')
# read in pm data, saved to an RDS already editted to keep the vignette clean
siteDF <- readRDS('/home/donatello/Rprojects/data/pmData')
traj <- readRDS('/home/donatello/Rprojects/data/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
require(terra)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
# Add conditional frequency fraction as an option first?
conditional_frequency_fraction(traj = traj, coordinates = coords, gritty = trajgrid, siteDF = siteDF)
# Add conditional frequency fraction as an option first?
plot <- conditional_frequency_fraction(traj = traj, coordinates = coords, gritty = trajgrid, siteDF = siteDF)
plot(plot)
cff <- plot
# S4 method for SpatRaster
cffDF <- as.data.frame(cff, xy=T, na.rm = T) %>%
filter(count < 1)
ggmap(vallejo) +
geom_point(data = cffDF, aes(x, y, color = count),
alpha = 0.5,
size = 5) +
scale_color_viridis_c()
vallejo <- readRDS('./data/Vallejo_basemap.RDS')
readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
ggmap(vallejo) +
geom_point(data = cffDF, aes(x, y, color = count),
alpha = 0.5,
size = 5) +
scale_color_viridis_c()
check()
check()
devtools::load_all()
regions <- c('Downtown', 'South')
statistic <- c('mean', 'median')
?make_more_maps()
document()
?make_more_maps()
make_more_maps(regions, statistics, vallejo)
make_more_maps(regions, statistic, vallejo)
statistic <- c('mean', 'tenth')
make_more_maps(regions, statistic, vallejo)
hey <- make_more_maps(regions, statistic, vallejo)
plot(hey)
rm(hey)
maps <- make_more_maps(regions, statistic, vallejo)
# Uncomment to create plots
cowplot::plot_grid(plotlist = mget(maps),
nrow = 2,
ncol = 2)
Now, use the *make_map()* function to generate the conditional frequency map.
document()
document()
check()
devtools::load_all()
?make_maps
?make_map
?make_more_map
?make_more_maps
document
document()
check()
