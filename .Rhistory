"/met_file_list"),
sep = ",",
row.names = FALSE,
col.names = FALSE,
quote = FALSE,
append = FALSE)
# Download the missing met files
if (FALSE %in% met_file_df[,2]) {
files_to_get <-
subset(met_file_df,
available == FALSE)[,1]
if (met_type == "reanalysis") {
get_met_reanalysis(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
if (met_type == "narr") {
get_met_narr(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
if (met_type == "gdas1") {
get_met_gdas1(
files = files_to_get,
path_met_files = paste0(met_dir, "/"))
}
}
}
if (get_os() == "win") {
for (k in 1:length(met)) {
met_file_df[k, 1] <- met[k]
met_file_df[k, 2] <-
as.character(file.exists(paste0(met_dir, "/",
met[k])))}
# Write the met file availability to file
write.table(
met_file_df,
file = paste0(met_dir, "/met_file_list"),
sep = ",",
row.names = FALSE,
col.names = FALSE,
quote = FALSE,
append = FALSE)
# Download the missing met files
if (FALSE %in% met_file_df[,2]) {
files_to_get <- subset(met_file_df,
available == FALSE)[,1]
if (met_type == "reanalysis") {
get_met_reanalysis(files = files_to_get,
path_met_files = met_dir)
}
if (met_type == "narr") {
get_met_narr(files = files_to_get,
path_met_files = met_dir)
}
if (met_type == "gdas1") {
get_met_gdas1(files = files_to_get,
path_met_files = met_dir)
}
}
}
# Construct the output filename string for this
# model run
output_filename <-
paste0("traj-",
ifelse(is.null(traj_name),
"", traj_name),
"-",
ifelse(direction == "backward",
"bwd", "fwd"), "-",
start_year_GMT, "-",
start_month_GMT, "-",
start_day_GMT, "-",
start_hour_GMT, "-",
z,
"lat_", gsub("\\.", "p", as.character(lat)), "_",
"lon_", gsub("\\.", "p", as.character(lon)), "-",
"hgt_", height, "-",
duration, "h")
#formatC(z, width = 5, format = "d", flag = "0"))
all_trajectory_files <-
c(all_trajectory_files, output_filename)
if (any(c("mac", "unix") %in% get_os())) {
# Write start year, month, day, hour to
# 'CONTROL'
cat(start_year_GMT, " ",
start_month_GMT, " ",
start_day_GMT, " ",
start_hour_GMT, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = FALSE)
# Write number of starting locations to
# 'CONTROL'
cat("1\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write starting latitude, longitude, height
# AGL to 'CONTROL'
cat(coords$lat[z], " ",
coords$lon[z], " ",
height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write direction and number of simulation
# hours to 'CONTROL'
cat(ifelse(direction == "backward", "-", ""),
duration, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write vertical motion option to 'CONTROL'
cat(vert_motion, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write top of model domain in meters to
# 'CONTROL'
cat(model_height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write number of met files used to 'CONTROL'
cat(length(met), "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write met file paths to 'CONTROL'
for (i in 1:length(met)) {
cat(met_dir, "/\n", met[i], "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)}
# Write path for trajectory output files to
# 'CONTROL'
cat(exec_dir, "/\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write name of output filename to 'CONTROL'
cat(output_filename, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
}
if (get_os() == "win") {
# Write start year, month, day, hour to
# 'CONTROL'
cat(start_year_GMT, " ",
start_month_GMT, " ",
start_day_GMT, " ",
start_hour_GMT, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = FALSE)
# Write number of starting locations
# to 'CONTROL'
cat("1\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write starting latitude, longitude, height
# AGL to 'CONTROL'
cat(coords$lat[z], " ",
coords$lon[z], " ",
height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write direction and number of simulation
# hours to 'CONTROL'
cat(ifelse(direction == "backward", "-", ""),
duration, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write vertical motion option to 'CONTROL'
cat(vert_motion, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write top of model domain in meters to
# 'CONTROL'
cat(model_height, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write number of met files used to 'CONTROL'
cat(length(met), "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write met file paths to 'CONTROL'
for (i in 1:length(met)) {
cat(met_dir, "/\n", met[i], "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)}
# Write path for trajectory output files to
# 'CONTROL'
cat(exec_dir, "/\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
# Write name of output filename to 'CONTROL'
cat(output_filename, "\n",
file = paste0(exec_dir, "/CONTROL"),
sep = '', append = TRUE)
}
# The CONTROL file is now complete and in the
# working directory, so, execute the model run
if (any(c("mac", "unix") %in% get_os())) {
system(paste0("(cd ", exec_dir, " && ",
binary_path,
" >> /dev/null 2>&1)"))
}
if (get_os() == "win") {
shell(paste0("(cd \"", exec_dir, "\" && \"",
binary_path,
"\")"))
# shell(paste0("(cd \"", exec_dir, "\")"))
}
}
}
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(exec_dir, "/",
folder_name))) {
dir.create(
path = paste0(exec_dir, "/",
folder_name))
}
system(paste0("(cd ", exec_dir, " && mv '",
all_trajectory_files[i], "' ",
paste0(out_dir, "/",
folder_name),
")"))
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(exec_dir, "/",
folder_name))) {
dir.create(
path = paste0(exec_dir, "/",
folder_name))
}
all_trajectory_files
dir.create(
path = paste0(out_dir, "/",
folder_name))
# Create the output folder if it doesn't exist
if (!dir.exists(paste0(out_dir, "/",
folder_name))) {
dir.create(
path = paste0(out_dir, "/",
folder_name))
}
if (any(c("mac", "unix") %in% get_os())) {
# Perform the movement of all trajectory files
# into a folder residing to the output directory
for (i in 1:length(all_trajectory_files)) {
system(paste0("(cd ", exec_dir, " && mv '",
all_trajectory_files[i], "' ",
paste0(out_dir, "/",
folder_name),
")"))
}
}
traj_df <-
trajectory_read(output_folder =
paste0(exec_dir, "/",
folder_name))
traj_df <-
trajectory_read(output_folder =
paste0(out_dir, "/",
folder_name))
?git_credentials()
git_credentials()
git
remotes::git_credentials()
?gitcreds::gitcreds_set()
gitcreds_get(url = 'https://github.com/zrliang24/testtraj.git', use_cache = T, set_cache = T)
gitcreds_set(url = 'https://github.com/zrliang24/testtraj.git', use_cache = T, set_cache = T)
require(tidyverse)
devtools::load_all('.')
vallejo <- readRDS('/home/donatello/Rprojects/data/Vallejo_basemap.RDS')
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
a <- Sys.time()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
rlang::last_trace()
git merge --abort
git commit -a
document()
?density
?conditional_frequency_fraction
check()
document()
?get_traj
require(tidyverse)
devtools::load_all('.')
check()
require('devtools')
check()
devtools::load_all()
?test_traj
document()
require(devtools)
?test_traj
document()
?test_traj()
?get_traj()
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
a <- Sys.time()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
rlang::last_trace()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
rlang::last_trace()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
check()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
require(tidyverse)
require(devtools)
load_all('.')
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
a <- Sys.time()
# Get hysplit trajectories for each date in dates
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
View(traj)
View(traj)
document()
?get_traj
check()
require(tidyverse)
require(devtools)
load_all('.')
browseVignettes(tidyverse)
browseVignettes('tidyverse')
devtools::load_all()
devtools::load_all()
usethis::use_vignette("my-vignette")
?get_traj
require(devtools)
load_all()
library(testtraj)
traj <- get_traj(trajDate = '2019-06-01',
OutDir = '/home/donatello/Documents',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj')
traj <- get_traj(trajDate = '2019-06-01',
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/')
traj <- get_traj(trajDate = '2019-06-01',
OutDir = '/home/donatello/Documents',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/')
### getTraj - Getting trajectories ##################
# Date range for trajectories
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
a <- Sys.time()
# Get hysplit trajectories for each date in dates
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
dates <- seq(as.Date('2019-01-24'),
as.Date('2019-01-25'),
"days") %>%
as.character()
# Get hysplit trajectories for each date in dates
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
check()
check()
?get_traj
document()
?get_traj
# Get hysplit trajectories for each date in dates
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
load_all()
# Get hysplit trajectories for each date in dates
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents/',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
### Vignette code
traj <- get_traj(trajDate = '2019-06-01',
OutDir = '/home/donatello/Documents',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/')
### Vignette code
traj <- get_traj(trajDate = '2019-06-01',
OutDir = '/home/donatello/Documents',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/')
View(traj)
saveRDS(traj, '/home/donatello/Rprojects')
saveRDS(traj, '/home/donatello/Rprojects/traj_example')
readRDS('/home/donatello/Rprojects/traj_example')
traj <- readRDS('/home/donatello/Rprojects/traj_example')
# filter for points within Vallejo boundaries
filter(lat >= 38.0 &
lat <= 38.2 &
lon >= -122.38 &
lon <= -122.15)
# read in trajectory data
traj <- readRDS('/home/donatello/Rprojects/traj_example')
# filter for points within Vallejo boundaries
filter(lat >= 38.0 & # ymin
lat <= 38.2 & # ymax
lon >= -122.38 & # xmin
lon <= -122.15)
# read in trajectory data
traj <- readRDS('/home/donatello/Rprojects/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 &
lat <= 38.2 &
lon >= -122.38 &
lon <= -122.15)
dates <- seq(as.Date('2019-02-01'),
as.Date('2019-02-30'),
"days") %>%
as.character()
dates <- seq(as.Date('2019-02-01'),
as.Date('2019-02-30'),
"days") %>%
as.character()
dates <- seq(as.Date('2019-01-20'),
as.Date('2019-01-30'),
"days") %>%
as.character()
dates <- seq(as.Date('2019-01-20'),
as.Date('2019-01-30'),
"days") %>%
as.character()
dates <- seq(as.Date('2019-02-01'),
as.Date('2019-02-25'),
"days") %>%
as.character()
dates <- seq(as.Date('2019-02-01'),
as.Date('2019-02-25'),
"days") %>%
as.character()
# Get hysplit trajectories for each date in dates
# traj <- map_dfr(dates, ~get_traj(., '/home/donatello/SplitR_NJS'))
traj <- map_dfr(dates, ~get_traj(.,
OutDir = '/home/donatello/Documents',
MetDir = '/home/donatello/Met',
ExecDir = '/home/donatello/Rprojects/testtraj/'))
saveRDS(traj, '/home/donatello/Rprojects/traj_example')
# read in trajectory data
traj <- readRDS('/home/donatello/Rprojects/traj_example') %>%
# filter for points within Vallejo boundaries
filter(lat >= 38.0 &
lat <= 38.2 &
lon >= -122.38 &
lon <= -122.15)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
library(terra)
# get extent
trajExt <- cbind(traj$lon, traj$lat) %>%
ext()
# create blank grid from extent
trajgrid <- rast(trajExt,
resolution = 0.005,
crs = '+proj=longlat +datum=WGS84')
outputs <- rasterize(coords, trajgrid, fun = 'count')
# create coordiates matrix for rasterize function
coords <- cbind(traj$lon, traj$lat)
outputs <- rasterize(coords, trajgrid, fun = 'count') %>%
as.data.frame(xy = T)
outputs <- rasterize(coords, trajgrid, fun = 'count')
plot(outputs)
